name: Node.js Package

on:
  push:
    branches:
      - extended-github-action

jobs:
  install-and-version:
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.set_output.outputs.has_changes }}
    permissions:
      contents: write
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0  # Ensure full commit history is available

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install PNPM
        run: npm install -g pnpm

      - name: Install Dependencies (Force Update Lockfile)
        run: pnpm install --no-frozen-lockfile

      - name: Install Changesets CLI in Workspace
        run: pnpm add -w -D @changesets/cli

      - name: Configure Git
        run: |
          git config --global user.name "ThilinaV98"
          git config --global user.email "thilinavithana98@gmail.com"
          git remote set-url origin https://x-access-token:${{ secrets.GH_TOKEN }}@github.com/${{ github.repository }}.git

      - name: Ensure .changeset Folder Exists
        run: |
          if [ ! -d ".changeset" ]; then pnpm changeset init; fi

      - name: Detect Changed Packages
        id: detect_changes
        run: |
          DIGIEYE_CHANGED=false
          DIGIEX_CHANGED=false

          # Check which package folders have changes
          if git diff --name-only HEAD~1 | grep -q "packages/Digieye/"; then
            DIGIEYE_CHANGED=true
          fi
          if git diff --name-only HEAD~1 | grep -q "packages/DigiEx/"; then
            DIGIEX_CHANGED=true
          fi

          echo "DIGIEYE_CHANGED=$DIGIEYE_CHANGED" >> $GITHUB_ENV
          echo "DIGIEX_CHANGED=$DIGIEX_CHANGED" >> $GITHUB_ENV
          echo "DIGIEYE_CHANGED=$DIGIEYE_CHANGED" >> $GITHUB_OUTPUT
          echo "DIGIEX_CHANGED=$DIGIEX_CHANGED" >> $GITHUB_OUTPUT

      - name: Determine Version Bump Type from Commit Message
        id: check_version
        run: |
          LAST_COMMIT_MESSAGE=$(git log -1 --pretty=%B)

          if [[ "$LAST_COMMIT_MESSAGE" == *"BREAKING CHANGE:"* ]]; then
            VERSION_TYPE="major"
          elif [[ "$LAST_COMMIT_MESSAGE" == *"feat:"* ]]; then
            VERSION_TYPE="minor"
          elif [[ "$LAST_COMMIT_MESSAGE" == *"fix:"* ]]; then
            VERSION_TYPE="patch"
          else
            VERSION_TYPE="patch" # Default to patch if no keyword is found
          fi

          echo "Detected version bump: $VERSION_TYPE"
          echo "VERSION_TYPE=$VERSION_TYPE" >> $GITHUB_ENV
          echo "VERSION_TYPE=$VERSION_TYPE" >> $GITHUB_OUTPUT

      - name: Create Changeset File for Modified Packages
        run: |
          mkdir -p .changeset

          # Create an empty changeset file
          CHANGESET_CONTENT="---\n"

          # Add packages that were changed
          if [[ "$DIGIEYE_CHANGED" == "true" ]]; then
            CHANGESET_CONTENT+="\"@thilinav98/digieye-types\": $VERSION_TYPE\n"
          fi
          if [[ "$DIGIEX_CHANGED" == "true" ]]; then
            CHANGESET_CONTENT+="\"@thilinav98/digiex-types\": $VERSION_TYPE\n"
          fi

          # If no packages were changed, exit early
          if [[ "$CHANGESET_CONTENT" == "---\n" ]]; then
            echo "No package changes detected, skipping changeset creation."
            exit 0
          fi

          # Finish writing the changeset file
          CHANGESET_CONTENT+="---\n\nAutomated version bump based on commit message."
          echo -e "$CHANGESET_CONTENT" > .changeset/auto-changeset.md

          git add .changeset

          # Run changeset version and commit all changes in one commit
          pnpm changeset version
          git add .
          git commit -m "chore: apply $VERSION_TYPE version bump via changesets"
          git push origin extended-github-action || (git pull --rebase origin extended-github-action && git push origin extended-github-action)
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Set Output for `has_changes`
        id: set_output
        run: echo "has_changes=true" >> $GITHUB_OUTPUT

  build:
    needs: install-and-version
    runs-on: ubuntu-latest
    if: needs.install-and-version.outputs.has_changes == 'true'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install PNPM
        run: npm install -g pnpm

      - name: Install Dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Run Build
        run: pnpm run build

  publish:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout Repository and Pull Latest Changes
        uses: actions/checkout@v4
        with:
          persist-credentials: true
          fetch-depth: 0  # Ensure full history is fetched

      - name: Ensure Latest Changes Are Applied
        run: |
          git fetch origin extended-github-action
          git reset --hard origin/extended-github-action

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://npm.pkg.github.com/

      - name: Install PNPM
        run: npm install -g pnpm

      - name: Install Dependencies
        run: pnpm install --no-frozen-lockfile

      - name: Publish DigiEx Package (Force Publish)
        if: env.DIGIEX_CHANGED == 'true'
        run: |
          cd packages/DigiEx
          pnpm publish --no-git-checks --registry=https://npm.pkg.github.com/ || echo "No changes detected"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GH_TOKEN }}

      - name: Publish DigiEye Package (Force Publish)
        if: env.DIGIEYE_CHANGED == 'true'
        run: |
          cd packages/Digieye
          pnpm publish --no-git-checks --registry=https://npm.pkg.github.com/ || echo "No changes detected"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GH_TOKEN }}
